{"initCode":"SECTIONS_TO_IGNORE = [\n    \"See also\",\n    \"References\",\n    \"External links\",\n    \"Further reading\",\n    \"Footnotes\",\n    \"Bibliography\",\n    \"Sources\",\n    \"Citations\",\n    \"Literature\",\n    \"Footnotes\",\n    \"Notes and references\",\n    \"Photo gallery\",\n    \"Works cited\",\n    \"Photos\",\n    \"Gallery\",\n    \"Notes\",\n    \"References and sources\",\n    \"References and notes\",\n]\n\ndef all_subsections_from_section(\n    section,\n    parent_titles: list[str],\n    sections_to_ignore: set[str],\n):\n    \"\"\"\n    From a Wikipedia section, return a flattened list of all nested subsections.\n    Each subsection is a tuple, where:\n        - the first element is a list of parent subtitles, starting with the page title\n        - the second element is the text of the subsection (but not any children)\n    \"\"\"\n    import mwparserfromhell\n    headings = [str(h) for h in section.filter_headings()]\n    if len(headings) == 0:\n        return [[\"/\".join(parent_titles), section.strip_code()]]\n    title = headings[0]\n    if title.strip(\"=\" + \" \") in sections_to_ignore:\n        # ^wiki headings are wrapped like \"== Heading ==\"\n        return []\n    titles = parent_titles + [title.strip(\"=\"+\" \")]\n    full_text = str(section)\n    section_text = full_text.split(title)[1]\n    stripped_text = mwparserfromhell.parse(section_text).strip_code().strip()\n    if not len(stripped_text):\n        return []\n    if len(headings) == 1:\n        return [[\"/\".join(titles), stripped_text]]\n    else:\n        first_subtitle = headings[1]\n        section_text = section_text.split(first_subtitle)[0]\n        results = [[\"/\".join(titles), stripped_text]]\n        for subsection in section.get_sections(levels=[len(titles) + 1]):\n            subs = all_subsections_from_section(subsection, titles, sections_to_ignore)\n            if len(subs):\n                results.extend(subs)\n        return results\n\ndef all_subsections_from_page(\n    content: str,\n    title,\n    sections_to_ignore: set[str] = SECTIONS_TO_IGNORE,\n):\n    \"\"\"From a Wikipedia page title, return a flattened list of all nested subsections.\n    Each subsection is a tuple, where:\n        - the first element is a list of parent subtitles, starting with the page title\n        - the second element is the text of the subsection (but not any children)\n    \"\"\"\n    import mwparserfromhell\n    text = content\n    parsed_text = mwparserfromhell.parse(text)\n    for link in parsed_text.filter_wikilinks():\n        if link.title.startswith(\"File:\"):\n            parsed_text.remove(link)\n    results = []\n    for subsection in parsed_text.get_sections(levels=[2], include_lead=True):\n        subs = all_subsections_from_section(subsection, [title], sections_to_ignore)\n        if len(subs):\n            results.extend(subs)\n    return results\n","code":"@udf(returnType=ArrayType(ArrayType(StringType())))\ndef parse_subsection(text:str, title:str):\n    return all_subsections_from_page(text, title)"}